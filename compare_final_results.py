#!/usr/bin/env python3
"""
Final comparison between DOCX and PDF versions after all fixes
"""

import json

def compare_final_results():
    print('üîç –§–ò–ù–ê–õ–¨–ù–û–ï –°–†–ê–í–ù–ï–ù–ò–ï DOCX vs PDF (–ü–û–°–õ–ï –í–°–ï–• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô)')
    print('=' * 70)
    
    # Load results
    with open('vahan_avagyan_docx_final_result.json', 'r', encoding='utf-8') as f:
        docx_result = json.load(f)
    
    with open('vahan_avagyan_pdf_final_result.json', 'r', encoding='utf-8') as f:
        pdf_result = json.load(f)
    
    print('üìä –û–°–ù–û–í–ù–´–ï –ú–ï–¢–†–ò–ö–ò:')
    print('-' * 50)
    print(f'{"–ú–µ—Ç—Ä–∏–∫–∞":<25} {"DOCX":<10} {"PDF":<10} {"–†–∞–∑–Ω–∏—Ü–∞":<10}')
    print('-' * 50)
    
    # Skills count
    docx_skills = len(docx_result['skills'])
    pdf_skills = len(pdf_result['skills'])
    skills_diff = docx_skills - pdf_skills
    print(f'{"–ù–∞–≤—ã–∫–∏":<25} {docx_skills:<10} {pdf_skills:<10} {skills_diff:+d}')
    
    # Roles count
    docx_roles = len(docx_result['roles'])
    pdf_roles = len(pdf_result['roles'])
    roles_diff = docx_roles - pdf_roles
    print(f'{"–†–æ–ª–∏":<25} {docx_roles:<10} {pdf_roles:<10} {roles_diff:+d}')
    
    # Languages count
    docx_langs = len(docx_result['languages'])
    pdf_langs = len(pdf_result['languages'])
    langs_diff = docx_langs - pdf_langs
    print(f'{"–Ø–∑—ã–∫–∏":<25} {docx_langs:<10} {pdf_langs:<10} {langs_diff:+d}')
    
    # Recommendations count
    docx_recs = len(docx_result['recommendations'])
    pdf_recs = len(pdf_result['recommendations'])
    recs_diff = docx_recs - pdf_recs
    print(f'{"–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏":<25} {docx_recs:<10} {pdf_recs:<10} {recs_diff:+d}')
    
    # Location
    docx_loc = docx_result['location']
    pdf_loc = pdf_result['location']
    loc_match = "‚úÖ" if docx_loc == pdf_loc else "‚ùå"
    print(f'{"–õ–æ–∫–∞—Ü–∏—è":<25} {docx_loc:<10} {pdf_loc:<10} {loc_match}')
    
    # Experience
    docx_exp = docx_result['experience']
    pdf_exp = pdf_result['experience']
    exp_match = "‚úÖ" if docx_exp == pdf_exp else "‚ùå"
    print(f'{"–û–ø—ã—Ç":<25} {docx_exp:<10} {pdf_exp:<10} {exp_match}')
    
    print()
    print('üéØ –¢–û–ü-5 –ù–ê–í–´–ö–û–í (DOCX):')
    print('-' * 50)
    for i, skill in enumerate(docx_result['skills'][:5], 1):
        print(f'{i}. {skill["name"]} (score: {skill["score"]})')
    
    print()
    print('üéØ –¢–û–ü-5 –ù–ê–í–´–ö–û–í (PDF):')
    print('-' * 50)
    for i, skill in enumerate(pdf_result['skills'][:5], 1):
        print(f'{i}. {skill["name"]} (score: {skill["score"]})')
    
    print()
    print('üíª –Ø–ó–´–ö–ò –ü–†–û–ì–†–ê–ú–ú–ò–†–û–í–ê–ù–ò–Ø:')
    print('-' * 50)
    
    # Find programming languages in both results
    docx_prog_langs = [s for s in docx_result['skills'] if any(lang in s['name'].lower() for lang in ['java', 'python', 'javascript', 'php', 'delphi'])]
    pdf_prog_langs = [s for s in pdf_result['skills'] if any(lang in s['name'].lower() for lang in ['java', 'python', 'javascript', 'php', 'delphi'])]
    
    print('DOCX –≤–µ—Ä—Å–∏—è:')
    for skill in docx_prog_langs:
        print(f'  ‚Ä¢ {skill["name"]} (score: {skill["score"]})')
        if skill.get('merged_names'):
            print(f'    –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ: {skill["merged_names"]}')
    
    print()
    print('PDF –≤–µ—Ä—Å–∏—è:')
    for skill in pdf_prog_langs:
        print(f'  ‚Ä¢ {skill["name"]} (score: {skill["score"]})')
        if skill.get('merged_names'):
            print(f'    –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ: {skill["merged_names"]}')
    
    print()
    print('üíº –†–û–õ–ò (DOCX):')
    print('-' * 50)
    for role in docx_result['roles']:
        print(f'‚Ä¢ {role["title"]} - {role["project"]} ({role["duration"]})')
    
    print()
    print('üíº –†–û–õ–ò (PDF):')
    print('-' * 50)
    for role in pdf_result['roles']:
        print(f'‚Ä¢ {role["title"]} - {role["project"]} ({role["duration"]})')
    
    print()
    print('üìà –ê–ù–ê–õ–ò–ó –†–ê–ó–õ–ò–ß–ò–ô:')
    print('-' * 50)
    
    if skills_diff > 0:
        print(f'‚úÖ DOCX –∏–∑–≤–ª–µ–∫ –±–æ–ª—å—à–µ –Ω–∞–≤—ã–∫–æ–≤ (+{skills_diff})')
    elif skills_diff < 0:
        print(f'‚úÖ PDF –∏–∑–≤–ª–µ–∫ –±–æ–ª—å—à–µ –Ω–∞–≤—ã–∫–æ–≤ ({skills_diff})')
    else:
        print('‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–≤—ã–∫–æ–≤ –æ–¥–∏–Ω–∞–∫–æ–≤–æ')
    
    if roles_diff > 0:
        print(f'‚úÖ DOCX –∏–∑–≤–ª–µ–∫ –±–æ–ª—å—à–µ —Ä–æ–ª–µ–π (+{roles_diff})')
    elif roles_diff < 0:
        print(f'‚úÖ PDF –∏–∑–≤–ª–µ–∫ –±–æ–ª—å—à–µ —Ä–æ–ª–µ–π ({roles_diff})')
    else:
        print('‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–æ–ª–µ–π –æ–¥–∏–Ω–∞–∫–æ–≤–æ')
    
    # Check for unique roles
    docx_role_titles = {role['title'] for role in docx_result['roles']}
    pdf_role_titles = {role['title'] for role in pdf_result['roles']}
    
    unique_to_docx = docx_role_titles - pdf_role_titles
    unique_to_pdf = pdf_role_titles - docx_role_titles
    
    if unique_to_docx:
        print(f'üìã –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ä–æ–ª–∏ –≤ DOCX: {", ".join(unique_to_docx)}')
    if unique_to_pdf:
        print(f'üìã –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ä–æ–ª–∏ –≤ PDF: {", ".join(unique_to_pdf)}')
    
    # Check programming languages separation
    docx_merged_prog = any('&' in skill['merged_names'] and any(lang in skill['name'].lower() for lang in ['java', 'python', 'javascript', 'php', 'delphi']) for skill in docx_result['skills'])
    pdf_merged_prog = any('&' in skill['merged_names'] and any(lang in skill['name'].lower() for lang in ['java', 'python', 'javascript', 'php', 'delphi']) for skill in pdf_result['skills'])
    
    print()
    print('üîß –ö–ê–ß–ï–°–¢–í–û –û–ë–†–ê–ë–û–¢–ö–ò:')
    print('-' * 50)
    
    if not docx_merged_prog and not pdf_merged_prog:
        print('‚úÖ –Ø–∑—ã–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–∞–∑–¥–µ–ª–µ–Ω—ã –≤ –æ–±–µ–∏—Ö –≤–µ—Ä—Å–∏—è—Ö')
    else:
        if docx_merged_prog:
            print('‚ö†Ô∏è DOCX: –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —è–∑—ã–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω—ã')
        if pdf_merged_prog:
            print('‚ö†Ô∏è PDF: –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —è–∑—ã–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω—ã')
    
    # Check for strange merged_names patterns
    docx_strange = [s for s in docx_result['skills'] if '(' in s['merged_names'] and ')' in s['merged_names'] and any(char.isdigit() for char in s['merged_names'])]
    pdf_strange = [s for s in pdf_result['skills'] if '(' in s['merged_names'] and ')' in s['merged_names'] and any(char.isdigit() for char in s['merged_names'])]
    
    if docx_strange:
        print('‚ö†Ô∏è DOCX: –Ω–∞–π–¥–µ–Ω—ã —Å—Ç—Ä–∞–Ω–Ω—ã–µ merged_names:')
        for skill in docx_strange:
            print(f'  - {skill["name"]}: {skill["merged_names"]}')
    
    if pdf_strange:
        print('‚ö†Ô∏è PDF: –Ω–∞–π–¥–µ–Ω—ã —Å—Ç—Ä–∞–Ω–Ω—ã–µ merged_names:')
        for skill in pdf_strange:
            print(f'  - {skill["name"]}: {skill["merged_names"]}')
    
    print()
    print('üèÜ –ò–¢–û–ì–û–í–´–ô –í–´–í–û–î:')
    print('-' * 50)
    
    if abs(skills_diff) <= 10 and abs(roles_diff) <= 3:
        print('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ—Ö–æ–∂–∏ - —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ')
    else:
        print('‚ö†Ô∏è –ï—Å—Ç—å –∑–∞–º–µ—Ç–Ω—ã–µ —Ä–∞–∑–ª–∏—á–∏—è –º–µ–∂–¥—É —Ñ–æ—Ä–º–∞—Ç–∞–º–∏')
    
    if docx_loc == pdf_loc and docx_exp == pdf_exp:
        print('‚úÖ –ö–ª—é—á–µ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–ª–æ–∫–∞—Ü–∏—è, –æ–ø—ã—Ç) –∏–∑–≤–ª–µ–∫–∞–µ—Ç—Å—è –æ–¥–∏–Ω–∞–∫–æ–≤–æ')
    else:
        print('‚ùå –ï—Å—Ç—å —Ä–∞–∑–ª–∏—á–∏—è –≤ –∫–ª—é—á–µ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏')
    
    if not docx_merged_prog and not pdf_merged_prog and not docx_strange and not pdf_strange:
        print('‚úÖ –ê–ª–≥–æ—Ä–∏—Ç–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –Ω–∞–≤—ã–∫–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ')
    else:
        print('‚ö†Ô∏è –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –Ω–∞–≤—ã–∫–æ–≤')

if __name__ == '__main__':
    compare_final_results()
